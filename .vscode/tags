!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	../col_equi_v1.py	/^A = 2*np.pi*a**2*59\/360*(np.sin(math.radians(69)) - np.sin(math.radians(-48))) # area of upwelling$/;"	kind:variable	line:10
B_int	../col_equi_v1.py	/^B_int=[3e3, 1.2e4, 3e3, 1.2e4]$/;"	kind:variable	line:16
B_int	../run_column.py	/^B_int=[3e3, 1.2e4, 3e3, 1.2e4]$/;"	kind:variable	line:5
H	../run_column.py	/^    H = res['H']$/;"	kind:variable	line:15
H_max_so	../col_equi_v1.py	/^H_max_so = [2000, 2000, 1500, 1500]$/;"	kind:variable	line:15
H_max_so	../run_column.py	/^H_max_so = [2000, 2000, 1500, 1500]$/;"	kind:variable	line:4
H_so	../col_equi_v1.py	/^    H_so = H_max_so[i]$/;"	kind:variable	line:34
Hf	../col_equi_v1.py	/^    Hf = res.p[0]$/;"	kind:variable	line:49
Model	../model.py	/^class Model(object):$/;"	kind:class	line:5
Model	../run_column.py	/^from model import Model$/;"	kind:namespace	line:1
N	../col_equi_v1.py	/^N = 4$/;"	kind:variable	line:19
N	../run_column.py	/^N = 4$/;"	kind:variable	line:6
__init__	../model.py	/^    def __init__($/;"	kind:member	line:6
a	../col_equi_v1.py	/^a = 6.37e6 # planetary radius (used in basin area calculation)$/;"	kind:variable	line:9
alpha	../col_equi_v1.py	/^    alpha = lambda z, H: H**2 \/ (A * kap(0, H))$/;"	kind:variable	line:39
alpha	../model.py	/^    def alpha(self, z, H):$/;"	kind:member	line:49
ax1	../col_equi_v1.py	/^ax1 = fig.add_subplot(111)$/;"	kind:variable	line:22
ax1	../run_column.py	/^ax1 = fig.add_subplot(111)$/;"	kind:variable	line:9
ax2	../col_equi_v1.py	/^ax2 = ax1.twiny()$/;"	kind:variable	line:23
ax2	../run_column.py	/^ax2 = ax1.twiny()$/;"	kind:variable	line:10
b	../col_equi_v1.py	/^    b = -b_s\/(f**2)$/;"	kind:variable	line:40
b_s	../col_equi_v1.py	/^b_s = 0.025 # surface buoyancy in the basin$/;"	kind:variable	line:8
bc	../col_equi_v1.py	/^    bc = lambda ya, yb, p: np.array([ ya[0], yb[0], ya[1], ya[3] + bz(p[0]), yb[2] - b\/p[0]])$/;"	kind:variable	line:43
bc	../model.py	/^    def bc(self, ya, yb, p):$/;"	kind:member	line:55
bz	../col_equi_v1.py	/^    bz = lambda H: B_int[i] \/ (f**3 * H**2 * A * kap(0, H))$/;"	kind:variable	line:41
bz	../model.py	/^    def bz(self, H): $/;"	kind:member	line:52
col_equi_v1.py	../col_equi_v1.py	1;"	kind:file	line:1
dkap_dz	../col_equi_v1.py	/^    dkap_dz = lambda z, H: 0$/;"	kind:variable	line:36
f	../col_equi_v1.py	/^f = 1.2e-4 # coriolis frequency$/;"	kind:variable	line:7
fig	../col_equi_v1.py	/^fig = plt.figure(figsize=(6,10))$/;"	kind:variable	line:21
fig	../run_column.py	/^fig = plt.figure(figsize=(6,10))$/;"	kind:variable	line:8
integrate	../col_equi_v1.py	/^from scipy import integrate$/;"	kind:namespace	line:4
integrate	../model.py	/^from scipy import integrate$/;"	kind:namespace	line:3
kap	../col_equi_v1.py	/^    kap = lambda z, H: kappa \/ (f * H**2)$/;"	kind:variable	line:35
kappa	../col_equi_v1.py	/^kappa = 6e-5 # constant diffusivity$/;"	kind:variable	line:11
kappa_4k	../col_equi_v1.py	/^kappa_4k = 3e-4$/;"	kind:variable	line:14
kappa_back	../col_equi_v1.py	/^kappa_back = 1e-5$/;"	kind:variable	line:12
kappa_s	../col_equi_v1.py	/^kappa_s = 3e-5$/;"	kind:variable	line:13
m	../run_column.py	/^    m = Model(H_max_so=H_max_so[i], B_int=B_int[i], diff_type='variable')$/;"	kind:variable	line:13
math	../col_equi_v1.py	/^import math$/;"	kind:namespace	line:1
math	../model.py	/^import math$/;"	kind:namespace	line:1
model.py	../model.py	1;"	kind:file	line:1
np	../col_equi_v1.py	/^import numpy as np$/;"	kind:namespace	line:2
np	../model.py	/^import numpy as np$/;"	kind:namespace	line:2
ode	../col_equi_v1.py	/^    ode = lambda z, y, p: ode_fun(z, y, p, H_so, alpha, kap, dkap_dz)$/;"	kind:variable	line:42
ode	../model.py	/^    def ode(self, z, y, p):$/;"	kind:member	line:62
ode_fun	../col_equi_v1.py	/^def ode_fun(z, y, p, H_so, alpha, kap, dkap_dz):$/;"	kind:function	line:29
plt	../col_equi_v1.py	/^from matplotlib import pyplot as plt$/;"	kind:namespace	line:5
plt	../run_column.py	/^from matplotlib import pyplot as plt$/;"	kind:namespace	line:2
psi	../run_column.py	/^    psi = res['psi']$/;"	kind:variable	line:17
psi_so	../col_equi_v1.py	/^def psi_so(z, H_so, H):$/;"	kind:function	line:25
psi_so	../model.py	/^    def psi_so(self, z, H):$/;"	kind:member	line:58
psi_so_max	../col_equi_v1.py	/^psi_so_max = 4.$/;"	kind:variable	line:18
res	../col_equi_v1.py	/^    res = integrate.solve_bvp(ode, bc, zi, sol_init, p=[H_max_so[i] - 200])$/;"	kind:variable	line:48
res	../run_column.py	/^    res = m.solve()$/;"	kind:variable	line:14
run_column.py	../run_column.py	1;"	kind:file	line:1
scipy	../col_equi_v1.py	/^import scipy$/;"	kind:namespace	line:3
sol_init	../col_equi_v1.py	/^    sol_init = np.zeros((4, zi.size))$/;"	kind:variable	line:44
solve	../model.py	/^    def solve(self):$/;"	kind:member	line:66
z	../run_column.py	/^    z = res['z']$/;"	kind:variable	line:16
zi	../col_equi_v1.py	/^zi = np.asarray(np.linspace(-1,0,100)) # vertical grid$/;"	kind:variable	line:17
